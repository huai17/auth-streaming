
#user  nobody;
worker_processes auto;

worker_rlimit_nofile 100000;

error_log /var/log/nginx-error.log crit;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;
events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)

    worker_connections 4000;

    # optimized to serve many clients with each thread, essential for linux -- for testing environment

    use epoll;

    # accept as many connections as possible, may flood worker connections if set too low -- for testing environment

    multi_accept on;
}

rtmp {
    server {

        listen 1935; # Listen on standard RTMP port

        ping 30s;
        notify_method get;

        chunk_size 4096;

        application src {
            live on;
            # exec_push ffmpeg -i rtmp://localhost/src/$name -vcodec libx264 -vprofile baseline -g 10 -s 300x200 -acodec aac -ar 44100 -ac 1 -f flv rtmp://localhost/hls/$name 2>>/var/log/ffmpeg-$name.log;
            exec_push ffmpeg -i rtmp://localhost/src/$name
            -acodec aac -b:a 32k -vcodec libx264 -b:v 128K -f flv rtmp://localhost/hls/$name;
        }

        application hls {
            live on;
            hls on;
            hls_path /tmp/hls;
            hls_fragment 2s;
            # hls_nested on;
            # hls_variant _low BANDWIDTH=160000;
            # hls_variant _mid BANDWIDTH=320000;
            # hls_variant _hi BANDWIDTH=640000;
        }

        # application src {
        #     live on;

        #     exec ffmpeg -i rtmp://127.0.0.1/$app/$name -f hls -hls_time 1 -hls_playlist_type event -hls_list_size 100 /tmp/hls/$name.m3u8;
        #     # exec sudo ffmpeg -i rtmp://127.0.0.1/$app/$name
        #     # -c:a aac -b:a 32k -c:v libx264 -b:v 128K -f flv rtmp://127.0.0.1/hls/$name_low
        #     # -c:a aac -b:a 64k -c:v libx264 -b:v 256k -f flv rtmp://127.0.0.1/hls/$name_mid
        #     # -c:a aac -b:a 128k -c:v libx264 -b:v 512K -f flv rtmp://127.0.0.1/hls/$name_hi;
        # }
        # application hls {
        #     live on;
        #     hls on;
        #     hls_path /tmp/hls;
        #     hls_nested on;
        #     hls_variant _low BANDWIDTH=160000;
        #     hls_variant _mid BANDWIDTH=320000;
        #     hls_variant _hi BANDWIDTH=640000;
        # }
        # # video on demand for flv files
        # application vod {
        #     play /tmp/flvs;
        # }
        # # video on demand for mp4 files
        # application vod2 {
        #     play /tmp/mp4s;
        # }
        # # This application is to accept incoming stream
        # application live {
        #     live on; # Allows live
        #     allow play all;
        #     on_publish http://127.0.0.1:8081/broadcast;
        #     #on_done http://127.0.0.1:8081/rtmp_streams_end;
        #     #on_play http://127.0.0.1:8081/broadcast;
        #     # Once receive stream, transcode for adaptive streaming
        #     # This single ffmpeg command takes the input and transforms
        #     # the source into 4 different streams with different bitrate
        #     # and quality. P.S. The scaling done here respects the aspect
        #     # ratio of the input.
        #     # exec bash /opt/transcode.sh $app $name;
        #     # exec_kill_signal term;
        #     exec_push ffmpeg -i rtmp://127.0.0.1/$app/$name -async 1 -vsync -1
        #     -c:v libx264 -x264opts keyint=24:no-scenecut -c:a aac -max_muxing_queue_size 4000 -r 30 -b:v 400k -profile:v high -b:a 128k -vf "trunc(oh*a/2)*2:360" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://127.0.0.1/hls/$name_360p
        #     -c:v libx264 -x264opts keyint=24:no-scenecut -c:a aac -max_muxing_queue_size 4000 -r 30 -b:v 500K -profile:v high -b:a 128k -vf "trunc(oh*a/2)*2:480" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://127.0.0.1/hls/$name_480p
        #     -c:v libx264 -x264opts keyint=24:no-scenecut -c:a aac -max_muxing_queue_size 4000 -r 30 -b:v 1500K -profile:v high -b:a 128k -vf "trunc(oh*a/2)*2:720" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://127.0.0.1/hls/$name_720p
        #     -c:v libx264 -x264opts keyint=24:no-scenecut -c:a aac -max_muxing_queue_size 4000 -r 30 -b:v 3000K -profile:v high -b:a 128k -vf "trunc(oh*a/2)*2:1080" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://127.0.0.1/hls/$name_1080p
        #     -c copy -f flv rtmp://127.0.0.1/hls/$name_src;
        #     record all;
        #     record_path /tmp/recordings;
        #     record_unique on;
        #     record_append on;
        #     exec_record_done ffmpeg -i /tmp/recordings/ -f mp4 /tmp/mp4s/$basename.mp4;
        # }
        # # application live_mobile {
        #     live on;
        #     allow play all;
        #     on_publish http://127.0.0.1:8081/broadcast;
        #     exec_push ffmpeg -re -i rtmp://127.0.0.1/$app/$name -async 1 -vsync -1 -max_muxing_queue_size 4000 -c:v copy -c:a copy -tune zerolatency -preset veryfast -crf 23 -f hls -hls_time 1 -hls_playlist_type event -hls_list_size 100 /tmp/hls/$name.m3u8;
        #     record all;
        #     record_path /tmp/recordings;
        #     record_unique on;
        #     record_append on;
        #     exec_record_done ffmpeg -i /tmp/recordings/ -f mp4 /tmp/mp4s/$basename.mp4;
        # }
        # # This application is for splitting the stream into HLS fragments
        # application hls {
        #     live on; # Allows live input from above
        #     hls on; # Enable HTTP Live Streaming
        #     hls_nested on;
        #     hls_fragment 3;
        #     hls_playlist_length 60;
        #     #hls_sync 100ms;
        #     hls_continuous on;
        #     deny play all;
        #     # Pointing this to an SSD is better as this involves lots of IO
        #     hls_path /tmp/hls/;
        #     hls_cleanup on;
        #     record all;
        #     record_path /tmp/recordings;
        #     record_unique on;
        #     record_append on;
        #     exec_record_done ffmpeg -i /tmp/recordings/ -f mp4 /tmp/mp4s/$basename.mp4;
        #     # Instruct clients to adjust resolution according to bandwidth
        #     hls_variant _360 BANDWIDTH=288000;
        #     hls_variant _480 BANDWIDTH=448000;
        #     hls_variant _720 BANDWIDTH=1152000;
        #     hls_variant _1080 BANDWIDTH=2048000;
        #     hls_variant _src BANDWIDTH=4096000;
        # }
        # application recorder {
        #     live on;
        #     recorder all {
        #         record all;
        #         record_path /tmp/recordings;
        #         #record_max_size 100000K;
        #         #record_max_frames 4;
        #         record_unique on;
        #         #record_suffix _%d%m%Y_%H%M%S.flv;
        #         #record_append on;
        #         #record_interval 5s;
        #         #record_notify on;
        #         exec_record_done ffmpeg -i $path -f mp4 /tmp/live/$basename.mp4;
        #     }
        # }
    }
}

http {

    # cache informations about FDs, frequently accessed files
    # can boost performance, but you need to test those values
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # to boost I/O on HDD we can disable access logs
    access_log off;

    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile on;

    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;

    # reduce the data that needs to be sent over network -- for testing environment
    gzip on;
    # gzip_static on;
    gzip_min_length 10240;
    gzip_comp_level 1;
    gzip_vary on;
    gzip_disable msie6;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
    # text/html is always compressed by HttpGzipModule
    text/css
    text/javascript
    text/xml
    text/plain
    text/x-component
    application/javascript
    application/x-javascript
    application/json
    application/xml
    application/rss+xml
    application/atom+xml
    font/truetype
    font/opentype
    application/vnd.ms-fontobject
    image/svg+xml;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    # request timed out -- default 60
    client_body_timeout 10;

    # if client stop responding, free up memory -- default 60
    send_timeout 2;

    # server will close connection after this time -- default 75
    keepalive_timeout 30;

    # number of requests client can make over keep-alive -- for testing environment
    keepalive_requests 100000;

    include mime.types;
    default_type application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    directio 512;

    #gzip  on;

    server {
        listen 80;
        server_name localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
        location / {
            # Disable cache
            add_header 'Cache-Control' 'no-cache';

            # CORS setup
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';

            # allow CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            types {
                application/dash+xml mpd;
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
                video/x-flv flv;
                video/mp4 mp4;
                video/webm webm;
            }

            root /tmp/;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}
        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;
    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;
    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;
    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
}
